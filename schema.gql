# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @upper on FIELD_DEFINITION

"""recipe """
type Recipe {
  id: ID!
  description: String
  creationDate: Date!
  ingredients: [String!]!
  title: String!
}

"""Date custom scalar type"""
scalar Date

"""test_choice """
type TestChoice {
  testResultUserId: ID!
  testResultPaperId: ID!
  optionNum: ID!
  optionPaperId: ID!
  optionQuestionNum: ID!
  testResult: TestResult!
  option: User!
  score: Int!
}

"""option """
type Option {
  num: ID!
  questionNum: ID!
  questionPaperId: ID!
  question: Question!
  testChoice: TestChoice!
  score: Int!
  content: String!
}

"""question """
type Question {
  num: ID!
  paperId: ID!
  paper: Paper!
  options: [Option!]!
  content: String!
}

"""paper """
type Paper {
  id: ID!
  name: String!
  testResults: [TestResult!]!
  questions: [Question!]!
}

"""test_result """
type TestResult {
  userId: ID!
  paperId: ID!
  user: User!
  paper: Paper!
  testChoices: [TestChoice!]!
  totalScore: Int!
  isSubmitted: Boolean!
}

"""user """
type User {
  id: ID!
  email: String!
  testResults: [TestResult!]!
}

type Query {
  recipe(id: String!): Recipe!
  recipes(skip: Int = 0, take: Int = 25): [Recipe!]!
  user(id: Float!): User!
  users: [User!]!
  paper(id: Float!): Paper!
  papers: [Paper!]!
  testResult(userId: Float!, paperId: Float!): TestResult!
  testResults: [TestResult!]!
  question(questionNum: Float!, paperId: Float!): Question!
  questions: [Question!]!
  option(optionNum: Float!, questionNum: Float!, paperId: Float!): Option!
  options: [Option!]!
}

type Mutation {
  addRecipe(newRecipeData: NewRecipeInput!): Recipe!
  removeRecipe(id: String!): Boolean!
  createUser(createOptionInput: CreateOptionInput!): Option!
  updateUser(id: Float!, updateUserInput: UpdateUserInput!): User!
  removeUser(id: Float!): User!
  createPaper(createPaperInput: CreatePaperInput!): Paper!
  updatePaper(id: Float!, updatePaperInput: UpdatePaperInput!): Paper!
  removePaper(id: Float!): Paper!
  updateTestResult(userId: Float!, paperId: Float!, updateTestResultInput: UpdateTestResultInput!): TestResult!
  removetestResult(userId: Float!, paperId: Float!): TestResult!
  updateQuestion(questionNum: Float!, paperId: Float!, updateQuestionInput: UpdateQuestionInput!): Question!
  removeQuestion(questionNum: Float!, paperId: Float!): Question!
  updateOption(optionNum: Float!, questionNum: Float!, paperId: Float!, updateOptionInput: UpdateOptionInput!): Option!
  removeOption(optionNum: Float!, questionNum: Float!, paperId: Float!): Option!
}

input NewRecipeInput {
  title: String!
  description: String
  ingredients: [String!]!
}

input CreateOptionInput {
  optionNum: Int!
  paperId: Int!
  questionNum: Int!
  score: Int!
  content: String!
}

input UpdateUserInput {
  email: String
}

input CreatePaperInput {
  name: String!
}

input UpdatePaperInput {
  name: String
}

input UpdateTestResultInput {
  totalScore: Int
  isSubmitted: Boolean
}

input UpdateQuestionInput {
  questionNum: Int
  paperId: Int
  content: String
}

input UpdateOptionInput {
  optionNum: Int
  paperId: Int
  questionNum: Int
  score: Int
  content: String
}

type Subscription {
  recipeAdded: Recipe!
}